services:
  - docker:dind
  - rabbitmq
  - redis
  - mysql
variables:
  TZ: Asia/Shanghai
  RABBITMQ_DEFAULT_USER: admin
  RABBITMQ_DEFAULT_PASS: tezign0818
  MYSQL_USER: tezign
  MYSQL_PASSWORD: tezign0818
  MYSQL_DATABASE: ops
  MYSQL_ROOT_PASSWORD: tezign0818
  MYSQL_HOST: ops_web_mysql
  MYSQL_PORT: 3306
  RUN_MODE: DEPLOY

init_mysql:
  stage: test
  image: mysql
  before_script:
    - mysql --version
  script:
    - mysql --user=root --password="$MYSQL_ROOT_PASSWORD" --host=mysql -e "use $MYSQL_DATABASE; show tables;"


init_redis:
  stage: test
  image: redis
  script:
    - docker exec -d redis echo 'requirepass tezign0818' > /etc/redis.conf
    - docker exec -d redis kill -9 1
    - redis-cli -h redis -p 6379 -a tezign0818 set hello world
    - redis-cli -h redis -p 6379 -a tezign0818 get hello

init_rabbitmq:
  stage: test
  image: rabbitmq
  script:
    - docker exec -d rabbitmq rabbitmqctl add_user ops Ops_mq && rabbitmqctl set_user_tags ops administrator && rabbitmqctl add_vhost vhost && rabbitmqctl set_permissions -p vhost ops ".*" ".*" ".*"


.test:
  image: python:3.7
  stage: test
  before_script:
    - pip install -r requirements.txt
    - python manage.py makemigrations && python manage.py migrate
    - python manage.py runserver
  script:
    - coverage run manage.py test
    - coverage report --include=*/tests/test*
  allow_failure: true



.build:
  stage: build
  image:
    name: tezign.com:5000/kaniko-executor:debug
    entrypoint: [""]
  before_script:
    - |
      echo "
      {
        "auths":
          {
            "$CI_REGISTRY":
              {
                "username": "$CI_REGISTRY_USER",
                "password": "$CI_REGISTRY_PASSWORD"
              }
          },
      }" > /kaniko/.docker/config.json
    - |
      echo "$REGISTRY_CERT" >> /kaniko/ssl/certs/ca-certificates.crt
    - echo "10.28.204.14 tezign.com" >> /etc/hosts
    - |
      echo '{
        "registry-mirrors": [
        "https://15gvlmjd.mirror.aliyuncs.com"
        ],
        "insecure-registries": [
          "tezign.com"
        ],
        "bip":"192.168.0.1/24"
      }' >> /kaniko/.docker/daemon.json
  script:
    - echo "image $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
    - if [[ $CI_COMMIT_TAG ]] && [[ $CI_COMMIT_TAG != "latest" ]];then /kaniko/executor --context $(pwd)/$CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG --skip-tls-verify-registry $CI_REGISTRY;fi
    - /kaniko/executor --context $(pwd)/$CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE:latest --skip-tls-verify-registry $CI_REGISTRY
  only:
    refs:
      - renew

.docker:
  image: tezign.com:5000/docker-with-compose:stable
  services:
    - docker:dind
  variables:
    TZ: Asia/Shanghai
    RUN_MODE: DEPLOY
    GIT_DEPTH: 3
    DOCKER_DRIVER: overlay2
  before_script:
    - mkdir -p /root/.ssh
    - echo "$DEPLOY_SSH_KEY" > /root/.ssh/id_rsa.pub
    - echo "$DEPLOY_SSH_PRI_KEY" > /root/.ssh/id_rsa
    - chmod -R 700 /root/.ssh
    - mkdir -p /etc/docker/certs.d/tezign.com:5000
    - |
      echo "$REGISTRY_CERT" >> /etc/docker/certs.d/tezign.com:5000/registry.crt
    - echo "10.28.204.14 tezign.com" >> /etc/hosts
    - |
      echo '{
        "registry-mirrors": [
          "https://15gvlmjd.mirror.aliyuncs.com"
        ],
        "insecure-registries": [
          "tezign.com"
        ],
        "bip":"192.169.100.1/24"
      }' >> /etc/docker/daemon.json

.staging:
  stage: deploy
  script:
    - if [ $STAGING_SERVER_USER ];then SERVER_USER=$STAGING_SERVER_USER;fi
    - if [ $STAGING_SERVER_PORT ];then SERVER_PORT=$STAGING_SERVER_PORT;fi
    - if [ $STAGING_SERVER_PASS ];then SERVER_PASS=$STAGING_SERVER_PASS;fi
    - ssh -o StrictHostKeyChecking=no -p $SERVER_PORT $SERVER_USER@$STAGING_SERVER_IP "uptime"
    - if [ $SERVER_USER != "root" ];then sudo rsync -avz -e "ssh -p $SERVER_PORT" docker-compose.yml deploy.sh $SERVER_USER@$STAGING_SERVER_IP:/home/$SERVER_USER/;else rsync -avz -e "ssh -p $SERVER_PORT" docker-compose.yml deploy.sh $SERVER_USER@$STAGING_SERVER_IP:/root/;fi
    - ssh -o StrictHostKeyChecking=no -p $SERVER_PORT -t $SERVER_USER@$STAGING_SERVER_IP "echo $SERVER_PASS | sudo -S /usr/local/bin/docker-compose pull;echo $SERVER_PASS | sudo -S /usr/local/bin/docker-compose up -d;echo $SERVER_PASS | sudo -S /bin/bash deploy.sh"
  only:
    - renew
  extends:
    .docker

.production:
  stage: deploy
  script:
    - if [ $PRODUCTION_SERVER_USER ];then SERVER_USER=$PRODUCTION_SERVER_USER;fi
    - if [ $PRODUCTION_SERVER_PORT ];then SERVER_PORT=$PRODUCTION_SERVER_PORT;fi
    - if [ $PRODUCTION_SERVER_PASS ];then SERVER_PASS=$PRODUCTION_SERVER_PASS;fi
    - ssh -o StrictHostKeyChecking=no -p $SERVER_PORT $SERVER_USER@$PRODUCTION_SERVER_IP "uptime"
    - if [ $SERVER_USER != "root" ];then sudo rsync -avz -e "ssh -p $SERVER_PORT" docker-compose.yml deploy.sh $SERVER_USER@$PRODUCTION_SERVER_IP:/home/$SERVER_USER/;else rsync -avz -e "ssh -p $SERVER_PORT" docker-compose.yml deploy.sh $SERVER_USER@$PRODUCTION_SERVER_IP:/root/;fi
    - ssh -o StrictHostKeyChecking=no -p $SERVER_PORT -t $SERVER_USER@$PRODUCTION_SERVER_IP "echo $SERVER_PASS | sudo -S /usr/local/bin/docker-compose pull;echo $SERVER_PASS | sudo -S /usr/local/bin/docker-compose up -d;echo $SERVER_PASS | sudo -S /bin/bash deploy.sh"
  when: manual
  only:
    - renew
  extends:
    .docker

stages:
  - test
  - build
  - deploy
