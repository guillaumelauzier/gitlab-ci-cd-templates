services:
  - rabbitmq
  - redis
  - mysql
variables:
  TZ: Asia/Shanghai
  RABBITMQ_DEFAULT_USER: $RABBITMQ_DEFAULT_USER
  RABBITMQ_DEFAULT_PASS: $RABBITMQ_DEFAULT_PASS
  MYSQL_USER: $MYSQL_USER
  MYSQL_PASSWORD: $MYSQL_PASSWORD
  MYSQL_DATABASE: $MYSQL_DATABASE
  MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
  MYSQL_HOST: ops_web_mysql
  MYSQL_PORT: 3306
  RUN_MODE: TEST

cache:
 paths:
 # This took some trial and error to figure out.
   - .cache/pip/
   - .sonar/cache

before_script:
 - pip install -r requirements.txt
 - ln -s /usr/local/python3/bin/flake8 /usr/bin/flake8
 - ln -s /usr/local/python3/bin/coverage /usr/bin/coverage

.unit_test:
  image: tezign.com:5000/centos7-python3.7:latest
  stage: unit_test
  before_script:
    - work_dir=`pwd`
    - yum install -y openssl
    - mkdir -p ~/.pip/
    - echo "[global]" > ~/.pip/pip.conf
    - echo "index-url = https://pypi.tuna.tsinghua.edu.cn/simple" >> ~/.pip/pip.conf
    - export PATH=/usr/local/python3/bin:$PATH
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - cd /usr/local/python3/lib/python3.7/site-packages/django/db/backends/mysql/
    - sed -i '35,36d' base.py
    - sed -i 's/query.decode/query.encode/g' operations.py
    - cd $work_dir
    - mkdir -p /root/.ssh/
    - cp sshkeys/* /root/.ssh/
  script:
    - python manage.py makemigrations && python manage.py migrate
    - nohup python manage.py runserver &
    - coverage run --source='.' manage.py test --
  after_script:
    - coverage report
  allow_failure: true

#.sonar_static_analysis:
#  stage: static_analysis
#  image:
#    name: tezign.com:5000/centos7-python3.7:latest
#  before_script:
#    - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873-linux.zip -o /opt/sonar-scanner-cli-4.2.0.1873-linux.zip
#    - unzip /opt/sonar-scanner-cli-4.2.0.1873-linux.zip
#    - echo "sonar.host.url=$SONAR_EXTERNAL_URL" >> /opt/sonar-scanner-cli-4.2.0.1873-linux/conf/sonar-scanner.properties
#    - export PATH=/opt/sonar-scanner-cli-4.2.0.1873-linux/bin:$PATH
#  script:
#    - |
#      sonar-scanner \
#      -Dsonar.projectKey=ops-django \
#      -Dsonar.sources=. \
#      -Dsonar.host.url=$SONAR_EXTERNAL_URL \
#      -Dsonar.login=$SONAR_LOGIN
#  allow_failure: true

.sonar_static_analysis:
  stage: static_analysis
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_TOKEN: $SONAR_LOGIN
    SONAR_HOST_URL: $SONAR_URL
  script:
    - sonar-scanner
    - if [ $? -eq 0 ]; then echo "sonarqube code-publish over.";fi
  only:
    - merge_requests
    - branches

.static_analysis:
  stage: static_analysis
  image:
    name: tezign.com:5000/centos7-python3.7:latest
  script:
    - flake8 --max-line-length=120 *.py
  allow_failure: true



.build_image:
  stage: build_image
  image:
    name: tezign.com:5000/kaniko-executor:debug
    entrypoint: [""]
  before_script:
    - |
      echo "
      {
        "auths":
          {
            "$CI_REGISTRY":
              {
                "username": "$CI_REGISTRY_USER",
                "password": "$CI_REGISTRY_PASSWORD"
              }
          },
      }" > /kaniko/.docker/config.json
    - |
      echo "$REGISTRY_CERT" >> /kaniko/ssl/certs/ca-certificates.crt
    - echo "10.28.204.14 tezign.com" >> /etc/hosts
    - |
      echo "
      {
        "registry-mirrors": [
        "https://15gvlmjd.mirror.aliyuncs.com"
        ],
        "insecure-registries": [
          "tezign.com"
        ],
        "bip":"192.168.0.1/24"
      }" >> /kaniko/.docker/daemon.json
    - if [[ $CI_COMMIT_TAG ]];then echo "image $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG";fi
    - if [[ $CI_COMMIT_TAG == "" ]];then echo "$CI_REGISTRY_IMAGE:latest";fi
  script:
    - if [[ $CI_COMMIT_TAG ]] && [[ $CI_COMMIT_TAG != "latest" ]];then /kaniko/executor --context $(pwd)/$CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG --skip-tls-verify-registry $CI_REGISTRY;fi
    - /kaniko/executor --context $(pwd)/$CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE:latest --skip-tls-verify-registry $CI_REGISTRY
  only:
    refs:
      - renew

.docker:
  image: tezign.com:5000/docker-with-compose:stable
  services:
    - docker:dind
  variables:
    TZ: Asia/Shanghai
    RUN_MODE: DEPLOY
    GIT_DEPTH: 3
    DOCKER_DRIVER: overlay2
  before_script:
    - mkdir -p /root/.ssh
    - echo "$DEPLOY_SSH_KEY" > /root/.ssh/id_rsa.pub
    - echo "$DEPLOY_SSH_PRI_KEY" > /root/.ssh/id_rsa
    - chmod -R 700 /root/.ssh
    - mkdir -p /etc/docker/certs.d/tezign.com:5000
    - |
      echo "$REGISTRY_CERT" >> /etc/docker/certs.d/tezign.com:5000/registry.crt
    - echo "10.28.204.14 tezign.com" >> /etc/hosts
    - |
      echo '{
        "registry-mirrors": [
          "https://15gvlmjd.mirror.aliyuncs.com"
        ],
        "insecure-registries": [
          "tezign.com"
        ],
        "bip":"192.169.100.1/24"
      }' >> /etc/docker/daemon.json

.staging:
  stage: deploy
  before_script:
    - if [ $STAGING_SERVER_USER ];then SERVER_USER=$STAGING_SERVER_USER;fi
    - if [ $STAGING_SERVER_PORT ];then SERVER_PORT=$STAGING_SERVER_PORT;fi
    - if [ $STAGING_SERVER_PASS ];then SERVER_PASS=$STAGING_SERVER_PASS;fi
    - ssh -o StrictHostKeyChecking=no -p $SERVER_PORT $SERVER_USER@$STAGING_SERVER_IP "uptime"
  script:
    - if [ $SERVER_USER != "root" ];then sudo rsync -avz -e "ssh -p $SERVER_PORT" docker-compose.yml deploy.sh $SERVER_USER@$STAGING_SERVER_IP:/home/$SERVER_USER/;else rsync -avz -e "ssh -p $SERVER_PORT" docker-compose.yml deploy.sh $SERVER_USER@$STAGING_SERVER_IP:/root/;fi
    - ssh -o StrictHostKeyChecking=no -p $SERVER_PORT -t $SERVER_USER@$STAGING_SERVER_IP "echo $SERVER_PASS | sudo -S /usr/local/bin/docker-compose pull;echo $SERVER_PASS | sudo -S /usr/local/bin/docker-compose up -d;echo $SERVER_PASS | sudo -S /bin/bash deploy.sh"
  only:
    - renew
  extends:
    .docker

.production:
  stage: deploy
  before_script:
    - if [ $PRODUCTION_SERVER_USER ];then SERVER_USER=$PRODUCTION_SERVER_USER;fi
    - if [ $PRODUCTION_SERVER_PORT ];then SERVER_PORT=$PRODUCTION_SERVER_PORT;fi
    - if [ $PRODUCTION_SERVER_PASS ];then SERVER_PASS=$PRODUCTION_SERVER_PASS;fi
    - ssh -o StrictHostKeyChecking=no -p $SERVER_PORT $SERVER_USER@$PRODUCTION_SERVER_IP "uptime"
  script:
    - if [ $SERVER_USER != "root" ];then sudo rsync -avz -e "ssh -p $SERVER_PORT" docker-compose.yml deploy.sh $SERVER_USER@$PRODUCTION_SERVER_IP:/home/$SERVER_USER/;else rsync -avz -e "ssh -p $SERVER_PORT" docker-compose.yml deploy.sh $SERVER_USER@$PRODUCTION_SERVER_IP:/root/;fi
    - ssh -o StrictHostKeyChecking=no -p $SERVER_PORT -t $SERVER_USER@$PRODUCTION_SERVER_IP "echo $SERVER_PASS | sudo -S /usr/local/bin/docker-compose pull;echo $SERVER_PASS | sudo -S /usr/local/bin/docker-compose up -d;echo $SERVER_PASS | sudo -S /bin/bash deploy.sh"
  when: manual
  only:
    - renew
  extends:
    .docker

stages:
  - unit_test
  - static_analysis
  - build_image
  - deploy
